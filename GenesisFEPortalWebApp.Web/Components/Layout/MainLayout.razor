@using Blazored.Toast.Configuration
@using GenesisFEPortalWebApp.Web.Services.Authentication
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                            <RadzenText TextStyle="TextStyle.Subtitle2">
                                @context.User.FindFirst(ClaimTypes.Name)?.Value
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption">
                                @context.User.FindFirst(ClaimTypes.Email)?.Value
                            </RadzenText>
                        </RadzenStack>
                        <RadzenButton ButtonStyle="ButtonStyle.Light"
                                      Icon="logout"
                                      Click="@(() => Navigation.NavigateTo("/logout"))" />
                    </RadzenStack>
                </Authorized>
                <NotAuthorized>
                    <RadzenLink Path="/login" Text="Login" />
                </NotAuthorized>
            </AuthorizeView>
         
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="10"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

        @code{
        
    public bool IsShowContent { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await ((CustomAuthStateProvider)AuthStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            IsShowContent = true;
        }

    }
}