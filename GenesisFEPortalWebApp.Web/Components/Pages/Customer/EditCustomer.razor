@page "/customer/edit/{Id:long}"
@using GenesisFEPortalWebApp.Models.Models
@using GenesisFEPortalWebApp.Models.Models.Customer
@using Newtonsoft.Json
@layout MainLayout
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Editar Cliente</PageTitle>

@if (isLoading)
{
    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" class="rz-p-4">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
}
else
{
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H3">Editar Cliente</RadzenText>
        
        <CustomerForm Model="@formModel"
                     OnSubmit="@HandleSubmit"
                     OnCancelClick="@HandleCancel" />
    </RadzenStack>
}

@code {
    [Parameter] public long Id { get; set; }
    private CustomerFormModel formModel = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomer();
    }

    private async Task LoadCustomer()
    {
        try
        {
            var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>($"/api/Customer/{Id}");
            
            if (response?.Success == true)
            {
                var customer = JsonConvert.DeserializeObject<CustomerModel>(response.Data.ToString()!)!;
                
                formModel = new CustomerFormModel
                {
                    CustomerName = customer.CustomerName,
                    CommercialName = customer.CommercialName,
                    Identification = customer.Identification,
                    IdentificationTypeId = customer.IdentificationTypeId,
                    Email = customer.Email,
                    PhoneCode = customer.PhoneCode,
                    Phone = customer.Phone,
                    ProvinceId = customer.District?.Canton?.ProvinceId,
                    CantonId = customer.District?.CantonId,
                    DistrictId = customer.DistrictId,
                    Address = customer.Address,
                    Neighborhood = customer.Neighborhood
                };
            }
            else
            {
                ToastService.ShowError("No se pudo cargar la información del cliente");
                NavigationManager.NavigateTo("/customer");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error al cargar la información del cliente");
            Console.Error.WriteLine(ex);
            NavigationManager.NavigateTo("/customer");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit(CustomerFormModel model)
    {
        try
        {
            var customerModel = new CustomerModel
            {
                ID = Id,
                CustomerName = model.CustomerName,
                CommercialName = model.CommercialName,
                Identification = model.Identification,
                IdentificationTypeId = model.IdentificationTypeId,
                Email = model.Email,
                PhoneCode = model.PhoneCode,
                Phone = model.Phone,
                DistrictId = model.DistrictId,
                Address = model.Address,
                Neighborhood = model.Neighborhood
            };

            var response = await ApiClient.PutAsync<BaseResponseModel, CustomerModel>($"/api/Customer/{Id}", customerModel);
            
            if (response?.Success == true)
            {
                ToastService.ShowSuccess("Cliente actualizado exitosamente");
                NavigationManager.NavigateTo("/customer");
            }
            else
            {
                ToastService.ShowError(response?.ErrorMessage ?? "Error al actualizar el cliente");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error al procesar la solicitud");
            Console.Error.WriteLine(ex);
        }
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/customer");
    }
}