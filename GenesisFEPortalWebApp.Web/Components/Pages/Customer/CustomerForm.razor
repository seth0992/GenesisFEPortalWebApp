@using GenesisFEPortalWebApp.Models.Entities.Catalog
@using GenesisFEPortalWebApp.Models.Models
@using GenesisFEPortalWebApp.Models.Models.Customer
@using Newtonsoft.Json
@inject ApiClient ApiClient
@inject IToastService ToastService

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <RadzenCard>
        <RadzenStack Gap="1rem">
            <RadzenFieldset Text="Información de Identificación">
                <RadzenRow class="rz-mb-3">
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Tipo de Identificación" Component="IdentificationTypeId" />
                        <RadzenDropDown @bind-Value="Model.IdentificationTypeId" 
                                      Data="@IdentificationTypes"
                                      TextProperty="Description"
                                      ValueProperty="ID"
                                      Change="@OnIdentificationTypeChange"
                                      Class="w-100" />
                        <ValidationMessage For="@(() => Model.IdentificationTypeId)" />
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Identificación" Component="Identification" />
                        <RadzenTextBox @bind-Value="Model.Identification" 
                                     Change="@OnIdentificationChange"
                                     Class="w-100" />
                        <ValidationMessage For="@(() => Model.Identification)" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>

            <RadzenFieldset Text="Información General">
                <RadzenRow class="rz-mb-3">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Nombre" Component="CustomerName" />
                        <RadzenTextBox @bind-Value="Model.CustomerName" Class="w-100" />
                        <ValidationMessage For="@(() => Model.CustomerName)" />
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Nombre Comercial" Component="CommercialName" />
                        <RadzenTextBox @bind-Value="Model.CommercialName" Class="w-100" />
                        <ValidationMessage For="@(() => Model.CommercialName)" />
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow class="rz-mb-3">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Email" Component="Email" />
                        <RadzenTextBox @bind-Value="Model.Email" Class="w-100" />
                        <ValidationMessage For="@(() => Model.Email)" />
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Teléfono" Component="Phone" />
                        <RadzenRow>
                            <RadzenColumn Size="4">
                                <RadzenTextBox @bind-Value="Model.PhoneCode" Placeholder="+506" />
                            </RadzenColumn>
                            <RadzenColumn Size="8">
                                <RadzenTextBox @bind-Value="Model.Phone" />
                            </RadzenColumn>
                        </RadzenRow>
                        <ValidationMessage For="@(() => Model.PhoneCode)" />
                        <ValidationMessage For="@(() => Model.Phone)" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>

            <RadzenFieldset Text="Dirección">
                <RadzenRow class="rz-mb-3">
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Provincia" Component="ProvinceId" />
                        <RadzenDropDown @bind-Value="Model.ProvinceId"
                                      Data="@Provinces"
                                      TextProperty="ProvinceName"
                                      ValueProperty="ProvinceID"
                                      Change="@LoadCantons"
                                      Class="w-100" />
                        <ValidationMessage For="@(() => Model.ProvinceId)" />
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Cantón" Component="CantonId" />
                        <RadzenDropDown @bind-Value="Model.CantonId"
                                      Data="@Cantons"
                                      TextProperty="CantonName"
                                      ValueProperty="CantonID"
                                      Change="@LoadDistricts"
                                      Class="w-100" />
                        <ValidationMessage For="@(() => Model.CantonId)" />
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Distrito" Component="DistrictId" />
                        <RadzenDropDown @bind-Value="Model.DistrictId"
                                      Data="@Districts"
                                      TextProperty="DistrictName"
                                      ValueProperty="DistrictID"
                                      Class="w-100" />
                        <ValidationMessage For="@(() => Model.DistrictId)" />
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenColumn Size="12">
                        <RadzenLabel Text="Dirección Completa" Component="Address" />
                        <RadzenTextArea @bind-Value="Model.Address" Class="w-100" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton ButtonType="ButtonType.Button" Text="Cancelar" ButtonStyle="ButtonStyle.Light" 
                            Click="OnCancel" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</EditForm>

@code {
    [Parameter] public CustomerFormModel Model { get; set; } = new();
    [Parameter] public EventCallback<CustomerFormModel> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancelClick { get; set; }

    private List<IdentificationTypeModel> IdentificationTypes { get; set; } = new();
    private List<ProvinceModel> Provinces { get; set; } = new();
    private List<CantonModel> Cantons { get; set; } = new();
    private List<DistrictModel> Districts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            await Task.WhenAll(
                LoadIdentificationTypes(),
                LoadProvinces()
            );

            if (Model.ProvinceId.HasValue)
            {
                await LoadCantons();
                if (Model.CantonId.HasValue)
                {
                    await LoadDistricts();
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error al cargar los datos iniciales");
            Console.Error.WriteLine(ex);
        }
    }

    private async Task LoadIdentificationTypes()
    {
        var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>("/api/Catalog/identification-types");
        if (response?.Success == true)
        {
            IdentificationTypes = JsonConvert.DeserializeObject<List<IdentificationTypeModel>>(response.Data.ToString()!)!;
        }
    }

    private async Task LoadProvinces()
    {
        var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>("/api/Catalog/provinces");
        if (response?.Success == true)
        {
            Provinces = JsonConvert.DeserializeObject<List<ProvinceModel>>(response.Data.ToString()!)!;
        }
    }

    private async Task LoadCantons()
    {
        if (!Model.ProvinceId.HasValue) return;

        var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>($"/api/Catalog/provinces/{Model.ProvinceId}/cantons");
        if (response?.Success == true)
        {
            Cantons = JsonConvert.DeserializeObject<List<CantonModel>>(response.Data.ToString()!)!;
            Model.CantonId = null;
            Model.DistrictId = null;
            Districts.Clear();
        }
    }

    private async Task LoadDistricts()
    {
        if (!Model.CantonId.HasValue) return;

        var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>($"/api/Catalog/cantons/{Model.CantonId}/districts");
        if (response?.Success == true)
        {
            Districts = JsonConvert.DeserializeObject<List<DistrictModel>>(response.Data.ToString()!)!;
            Model.DistrictId = null;
        }
    }

    private async Task OnValidSubmit()
    {
        await OnSubmit.InvokeAsync(Model);
    }

    private async Task OnCancel()
    {
        await OnCancelClick.InvokeAsync();
    }

    private void OnIdentificationTypeChange()
    {
        Model.Identification = string.Empty;
    }

    private void OnIdentificationChange(string value)
    {
        // Formatear la identificación según el tipo
        if (string.IsNullOrEmpty(Model.IdentificationTypeId)) return;

        Model.Identification = Model.IdentificationTypeId switch
        {
            "01" => FormatCedulaFisica(value),
            "02" => FormatCedulaJuridica(value),
            "03" => FormatDIMEX(value),
            "04" => FormatNITE(value),
            _ => value
        };
    }

    private string FormatCedulaFisica(string value)
    {
        // Eliminar caracteres no numéricos
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        return numbers.Length > 9 ? numbers[..9] : numbers;
    }

    private string FormatCedulaJuridica(string value)
    {
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        return numbers.Length > 10 ? numbers[..10] : numbers;
    }

    private string FormatDIMEX(string value)
    {
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        return numbers.Length > 12 ? numbers[..12] : numbers;
    }

    private string FormatNITE(string value)
    {
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        return numbers.Length > 10 ? numbers[..10] : numbers;
    }
}co