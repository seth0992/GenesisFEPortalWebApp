@page "/login"
@layout EmptyLayout
@using GenesisFEPortalWebApp.Models.Models.Auth
@using GenesisFEPortalWebApp.Web.Services.Authentication
@using Newtonsoft.Json
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center">Login</h3>
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>
                        <div class="form-group mt-3">
                            <label>Password</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();

    private async Task HandleLogin()
    {
        try
        {
            var result = await ApiClient.PostAsync<LoginResponseModel, LoginDto>("/api/auth/login", loginModel);

            if (result != null)
            {
                await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ToastService.ShowError("Error en el inicio de sesión");
            }
        }
        catch (JsonSerializationException ex)
        {
            Console.WriteLine($"Error de deserialización: {ex.Message}");
            ToastService.ShowError("Error al procesar la respuesta del servidor");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error general: {ex.Message}");
            ToastService.ShowError("Error al intentar iniciar sesión");
        }
    }

}